import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report

st.set_page_config(page_title=" üö¢ Titanic Classifier", layout="wide")
st.title(' üö¢ Titanic Classifier - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¢–∏—Ç–∞–Ω–∏–∫–∞')
st.write("## –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º —Ç–∏—Ç–∞–Ω–∏–∫–∞")

df = pd.read_csv('titanic_final_processed.csv')

st.subheader("–°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ç—Ä–æ–∫")
st.dataframe(df.sample(10), use_container_width=True)

st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
col1, col2 = st.columns(2)
with col1:
  fig1 = px.histogram(df, x="Survived", color="FamilySize", barmode="group", title="–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –∏—Å—Ö–æ–¥—è –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏")
  st.plotly_chart(fig1, use_container_width=True)
with col2:
  fig2 = px.scatter(df, x="Age", y="Fare", color="Survived", title="–í–æ–∑—Ä–∞—Å—Ç—å vs –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞")
  st.plotly_chart(fig2, use_container_width=True)
X = df.drop(['Survived'], axis=1)
y = df['Survived']  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

st.subheader("–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏")

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

with st.expander("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"):
    st.write("–≠—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –Ω–µ –≤–∏–¥–µ–ª–∞.")
    
    test_accuracy = accuracy_score(y_test, y_test_pred)
    test_precision = precision_score(y_test, y_test_pred)
    test_recall = recall_score(y_test, y_test_pred)
    test_f1 = f1_score(y_test, y_test_pred)
    
    col_acc, col_prec, col_rec, col_f1 = st.columns(4)
    with col_acc:
        st.metric(label="–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)", value=f"{test_accuracy:.2f}")
    with col_prec:
        st.metric(label="–¢–æ—á–Ω–æ—Å—Ç—å (Precision)", value=f"{test_precision:.2f}")
    with col_rec:
        st.metric(label="–ü–æ–ª–Ω–æ—Ç–∞ (Recall)", value=f"{test_recall:.2f}")
    with col_f1:
        st.metric(label="F1-score", value=f"{test_f1:.2f}")

    st.markdown("---")
    st.write("#### –û—Ç—á–µ—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (Classification Report)")
    report = classification_report(y_test, y_test_pred, output_dict=True)
    st.dataframe(pd.DataFrame(report).T.round(2), use_container_width=True)

    st.markdown("---")
    st.write("#### –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (Confusion Matrix)")
    cm = confusion_matrix(y_test, y_test_pred)
    
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax,
                xticklabels=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
                yticklabels=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'])
    ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫')
    ax.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
    ax.set_ylabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å')
    st.pyplot(fig)

with st.expander("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)"):
    st.write("–≠—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω–∞ –æ–±—É—á–∞–ª–∞—Å—å. –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏–ª—å–Ω–æ –ª—É—á—à–µ, —á–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ, —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ.")
    
    train_accuracy = accuracy_score(y_train, y_train_pred)
    train_precision = precision_score(y_train, y_train_pred)
    train_recall = recall_score(y_train, y_train_pred)
    train_f1 = f1_score(y_train, y_train_pred)
    
    col_acc, col_prec, col_rec, col_f1 = st.columns(4)
    with col_acc:
        st.metric(label="–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)", value=f"{train_accuracy:.2f}")
    with col_prec:
        st.metric(label="–¢–æ—á–Ω–æ—Å—Ç—å (Precision)", value=f"{train_precision:.2f}")
    with col_rec:
        st.metric(label="–ü–æ–ª–Ω–æ—Ç–∞ (Recall)", value=f"{train_recall:.2f}")
    with col_f1:
        st.metric(label="F1-score", value=f"{train_f1:.2f}")
    
    st.markdown("---")
    st.write("#### –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (Confusion Matrix) –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ")
    cm_train = confusion_matrix(y_train, y_train_pred)
    
    fig_train, ax_train = plt.subplots()
    sns.heatmap(cm_train, annot=True, fmt='d', cmap='Greens', ax=ax_train,
                xticklabels=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
                yticklabels=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'])
    ax_train.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è)')
    ax_train.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
    ax_train.set_ylabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å')
    st.pyplot(fig_train)

st.sidebar.header("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏")

pclass_options = [1, 2, 3]
sex_options = ['male', 'female']

pclass_input = st.sidebar.selectbox("–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞ (Pclass)", pclass_options)
sex_input = st.sidebar.selectbox("–ü–æ–ª (Sex)", sex_options)

age_min, age_max = float(df['Age'].min()), float(df['Age'].max())
age_mean = float(df['Age'].mean())
age_input = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç (Age)", age_min, age_max, age_mean)

fare_min, fare_max = float(df['Fare'].min()), float(df['Fare'].max())
fare_mean = float(df['Fare'].mean())
fare_input = st.sidebar.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ (Fare)", fare_min, fare_max, fare_mean)

familysize_min, familysize_max = float(df['FamilySize'].min()), float(df['FamilySize'].max())
familysize_mean = float(df['FamilySize'].mean())
familysize_input = st.sidebar.slider("–†–∞–∑–º–µ—Ä —Å–µ–º—å–∏ (FamilySize)", familysize_min, familysize_max, familysize_mean)

user_input_df = pd.DataFrame(columns=X_train.columns)
user_input_df.loc[0] = 0 # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω—É–ª—è–º–∏

if pclass_input == 2:
    if 'Pclass_2' in user_input_df.columns:
        user_input_df['Pclass_2'] = 1
elif pclass_input == 3:
    if 'Pclass_3' in user_input_df.columns:
        user_input_df['Pclass_3'] = 1

if sex_input == 'male':
    if 'Sex_male' in user_input_df.columns:
        user_input_df['Sex_male'] = 1

user_input_df['Age'] = age_input
user_input_df['Fare'] = fare_input
user_input_df['FamilySize'] = familysize_input

user_input_df = user_input_df.reindex(columns=X_train.columns, fill_value=0)

st.sidebar.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

prediction = model.predict(user_input_df)[0]
prediction_proba = model.predict_proba(user_input_df)[0]

if prediction == 1:
    st.sidebar.success(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: –í—ã–∂–∏–≤–µ—Ç!**")
else:
    st.sidebar.error(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: –ù–µ –≤—ã–∂–∏–≤–µ—Ç.**")

proba_df = pd.DataFrame({
    '–ò—Å—Ö–æ–¥': ['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
    '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': prediction_proba
})

st.sidebar.dataframe(proba_df.set_index("–ò—Å—Ö–æ–¥"), use_container_width=True)

